// Generated by CoffeeScript 1.6.3
var ChatServer, app, chatServer, express, http, httpServer, moment, request, sockjs,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

express = require('express');

http = require('http');
https = require('https');

moment = require('moment');

sockjs = require('sockjs');

request = require('request');

ChatServer = (function() {
  function ChatServer(httpServer) {
    var _this = this;
    this.server = sockjs.createServer({
      prefix: '/chat',
      log: function(severity, message) {
        if (severity === 'error') {
          return console.log(message);
        }
      }
    });
    this.messages = {}
    this.lobby = [];
    this.server.installHandlers(httpServer);
    this.server.on('connection', function(conn) {
      conn.writeJSON = function(data) {
        return conn.write(JSON.stringify(data));
      };
      conn.on('data', function(data) {
        return _this.constructor.emitData(conn, data);
      });
      return conn.on('auth', function(data) {
        return _this.auth(conn, data);
      });
    });
  }

  ChatServer.emitData = function(conn, data) {
    data = JSON.parse(data);
    if (data.type != null) {
      return conn.emit(data.type, data);
    }
  };

  ChatServer.prototype.broadcast = function(data) {
    var conn, _i, _len, _ref, _ref1, _results;
    if (data.room != null) {
      _ref = this.lobby;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        conn = _ref[_i];
        if (_ref1 = data.room, __indexOf.call(conn.userObject.rooms, _ref1) >= 0) {
          _results.push(conn.writeJSON(data));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  ChatServer.prototype.auth = function(conn, authData) {
    var _this = this;
    getreq = {
      uri: "https://hvz.gryphus.io/game/" + authData.gameID + "/chat/auth/",
      headers: {
        Host: 'hvz.gryphus.io',
        Cookie: "sessionid=" + authData.sessionid
      },
      json: true
    }
    return request.get(
      getreq,
      function(err, res, body) {
      if (res.statusCode === 200) {
        conn.userObject = body;
        conn.on('chat', function(data) {
          return _this.chat(conn, data);
        });
        conn.on('close', function() {
          _this.broadcast({type: 'announce', announce: '#{ authData.name } has left the room.'});
          return _this.removeConn(conn);
        });
        _this.lobby.push(conn);
        _this.broadcast({type: 'announce', announce: '#{ authData.name } has entered the fray'});
        return conn.writeJSON({
          type: 'authenticated',
          history: _this.messages.length > 100 ? _this.messages.slice(-100) : _this.messages
        });
      }
    });
  };

  ChatServer.prototype.chat = function(conn, data) {
    if (conn.userObject.rooms.length === 1) {
      let room = conn.userObject.rooms[0];
      data.room = room

      if (!Array.isArray(this.messages[room])) {
        this.messages[room] = []
      }

      this.messages[room].push(data)
    }
    this.broadcast(data);
    return this.log(conn, data);
  };

  ChatServer.prototype.updateUserRooms = function(uid, roomList) {
    var conn, i, _i, _len, _ref, _results;
    _ref = this.lobby;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      conn = _ref[i];
      if (conn.userObject.uid === uid) {
        conn.userObject.rooms = roomList;
        _results.push(conn.writeJSON({
          type: 'refresh'
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  ChatServer.prototype.removeConn = function(conn) {
    return this.lobby = this.lobby.filter(function(v) {
      return v.id !== conn.id;
    });
  };

  ChatServer.prototype.log = function(conn, data) {
    return console.log("[" + (moment().format('DD/MM/YYYY hh:mm:ss A')) + "] " + conn.userObject.name + ": " + (JSON.stringify(data)));
  };

  return ChatServer;

})();

app = express();

app.use(express.json());

httpServer = http.createServer(app);

httpServer.listen(36452, '0.0.0.0');

chatServer = new ChatServer(httpServer);

app.post('/admin/updateUserRooms', function(req, res) {
  chatServer.updateUserRooms(req.body.uid, req.body.rooms);
  return res.send(200);
});
